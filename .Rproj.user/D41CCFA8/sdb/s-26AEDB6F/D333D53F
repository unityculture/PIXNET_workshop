{
    "collab_server" : "",
    "contents" : "---\ntitle: \"資料清理與轉換\"\nsubtitle: \"Data Extract, Transform and Load\"\nauthor: \"Lin 與其他作者群 @PIXNET Workshop\"\ndate: ' 2017-06-10'\noutput:\n  ioslides_presentation:\n    css: css/dsp.css\n    # logo: assets/img/Taiwan-R-logo.png\n    widescreen: yes\n    self_contained: false\n---\n\n# 課程教材作者群\n \n## 課程教材作者群\n\n\n<style>\n  .col2 {\n    columns: 2 200px;         /* number of columns and width in pixels*/\n    -webkit-columns: 2 200px; /* chrome, safari */\n    -moz-columns: 2 200px;    /* firefox */\n  }\n  .col3 {\n    columns: 3 100px;\n    -webkit-columns: 3 100px;\n    -moz-columns: 3 100px;\n  }\n</style>\n\n名人堂：\n\n<div class=\"col2\">\n- <center>Johnson Hsieh <br><img src = 'img/johnson.jpg' height = 120></center>\n- <center>Wush Wu <br><img src = 'img/wush.jpg' height = 120></center>\n<br><br><br><br><br>\n- <center>Rafe C. H. Liu <br><img src = 'img/rafe.jpg' height = 100></center>\n- <center>GU Chen <br><img src = 'img/yupei.jpg' height = 100></center>\n- <center>LIYUN <br><img src = 'img/liyun.jpg' height = 100></center>\n</div>\n\n\n## 大家好！我是 Lin！\n\n<center><h3>**33% Data Analyst + 33% Backpackers + 33% Coffee Hunter**</h3></center>\n<br>\n些許經歷：\n\n<div class=\"col2\">\n- <center>Data Analyst Intern at Whoscall<br><img src = 'https://whoscall.com/static/images/og-image.png?q=1492154117' height = 150></center>\n- <center>Data Analyst Intern at DSP<br><img src = 'https://dsp.im/wp-content/uploads/2014/12/dsp-logo_Final_1024_2.png' height = 150></center>\n- <center>2016 Asia Open Data Hackathon Top1<br><img src = 'http://opendata.tca.org.tw/hackathon/images/slides1.jpg' height = 150></center>\n- <center>健保資料庫研究</center>\n</div>\n\n## 最重要的是.... 求職中 ^.< \n\n<center><img src = 'img/cv.jpg' height = 450><br>[點我瞭解更多 XDD](https://www.cakeresume.com/shenglincv_eng_linkedin)</center>\n\n# Data ETL 課程大綱\n\n## Agenda\n\n- Data Input / Output：**學會** 讀取不同種的資料格式與輸出。\n- Data Manipulation：**學會** 如何將資料操之在手。\n- Data Aggregation： **學會** 如何彙總出你有興趣的數字。\n\n# Data I/O：表格型文件的輸入與輸出\n\n```{r setup, include=FALSE, cache=FALSE}\nlibrary(knitr)\nlibrary(magrittr)\nlibrary(xtable)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(tidyr)\nlibrary(stringr)\nlibrary(DT)\noptions('scipen'=100,'digits'=2)\n## Global options\noptions(max.print=\"75\")\nopts_chunk$set(echo = TRUE, cache=TRUE, comment=\"\", \n               cache.path = \".cache-EDA/\")\nfig <- function(path, size = 100) {\n  sprintf(\"<img src='img/%s' style='max-width: %d%%;max-height: %d%%'></img>\", \n          path, size, size)\n}\nfig2 <- function(path, size = 100) {\n  sprintf(\"<img src='img/%s' style='width: %d%%'></img>\", \n          path, size)\n}\nsys_name <- Sys.info()[\"sysname\"] %>% tolower\nsys_encode <- c(\"utf8\", \"utf8\", \"big5\")[pmatch(sys_name, c(\"linux\", \"darwin\", \"windows\"))]\nsessionInfo() %>% capture.output %>% cat(file = \"sessionInfo.log\", sep = \"\\n\")\n```\n\n## 在讀檔案之前，先了解路徑的種類\n\n路徑分為兩種：\n\n- 絕對路徑：一般大家所認知的路徑長相。\n- 相對路徑：從 `working directory(工作目錄) 開始尋找`\n\n```{r, eval = F}\n## 查看目前 Working directory 在哪個位置\ngetwd()\n## 查看該工作目錄底下有什麼檔案\ndir()\n## 更改、設定工作目錄位置\n# setwd('這邊放路徑')\n```\n\n\n## 輸入表格檔案(1/3)\n\n- [下載範例資料](https://raw.githubusercontent.com/unityculture/PIXNET_workshop/master/data/transaction.csv)\n- 利用`read.csv` 讀取 `csv` 檔 (一種以逗點分隔欄位的資料格式)    \n- 路徑必須指到下載的位置\n\n```{r, eval = F}\n############### 絕對路徑 ###############\n# 請輸入完整的檔案路徑\ntransaction <- read.csv(\"/Users/sheng/Desktop/data/transaction.csv\") #如果你是mac\ntransaction <- read.csv(\"C:\\\\Users\\\\transaction.csv\") #如果你是windows \n############### 相對路徑 ###############\n# 設定我們檔案存放的路徑\nsetwd() \n# 讀檔起手式\ntransaction <- read.csv(\"transaction.csv\") \n# 若讀入的是亂碼，猜猜看以下兩種編碼 utf-8 and big5\ntransaction <- read.csv(\"transaction.csv\",fileEncoding = 'big5')\ntransaction <- read.csv(\"transaction.csv\",fileEncoding = 'utf-8')\n```\n\n## 輸入表格檔案(2/3)\n\n看看資料輸入後的結果有沒有問題:\n\n```{r, eval = F}\ntransaction <- read.csv(\"data/transaction.csv\")\nhead(transaction)\n```\n\n```{r, cache = T, echo = F}\ntransaction <- read.csv(\"data/transaction.csv\")\n```\n\n<center><img src = 'img/head_data.jpg' width = 85%></center> . . .\n\n---\n\n```{r echo = FALSE,fig.height=3, warning=FALSE, fig.align='center', message=FALSE, results='asis'}\ndata.frame(英文欄位名稱=c(\"city\",\"district\",\"trac_year\",\"trac_month\",\"trac_type\",\"trac_content\",\n                   \"use_type\",\"build_type\",\"build_ymd\",\"area_land\",\"area_build\",\n                   \"area_park\",\"price_total\",\"price_unit\"),\n           中文欄位名稱=c(\"縣市\",\"鄉鎮市區\",\"交易年份\",\"交易月份\",\"交易標的\",\"交易筆棟數\",\"使用分區或編定\",\n                    \"建物型態\",\"建築完成年月\",\"土地移轉總面積.平方公尺.\",\"建物移轉總面積.平方公尺.\",\n                    \"車位移轉總面積.平方公尺.\",\"總價.元.\",\"單價.元.平方公尺.\")) -> name\n\n```\n\n<div style='float:left;width:48%;'>\n\n```{r, echo = FALSE}\nname[1:7,] %>% knitr::kable()\n```\n\n</div>\n\n<div style='float:right;width:50%;'>\n\n```{r, echo = FALSE}\nname[8:14,] -> name2\nrownames(name2) <- c(1:7)\nname2 %>% knitr::kable()\n```\n\n</div>\n\n\n## 輸入表格檔案(3/3)\n\n若是資料不如 `csv` 檔以 `,` 做分隔呢？\n\n`read.table()`可以解決上述的問題，透過`?read.table()`可以查看其中可以調整的參數。注意到`sep = `是指定要輸入的資料是用什麼符號做分隔，當 `read.table()` 的 `sep = ','`時，跟 `read.csv()` 是相同的。\n\n```{r, eval = F}\ntransaction <- read.csv(\"data/transaction.csv\")\ntransaction <- read.table(\"data/transaction.csv\", sep = ',', header = T)\n```\n\n\n## 輸出表格檔案\n\n利用`write.csv`將`data.frame`格式的R物件另存成csv檔。為了效率，我們僅將 `head(data)` 6筆資料做輸出成 `transaction_head.csv` 即可。\n\n```{r echo=TRUE, eval=FALSE}\nwrite.csv(head(transaction), \"transaction_head.csv\", row.names=FALSE,quote=FALSE)\n```\n\n<center><img src = 'img/writecsv.jpg' width = 60%></center>\n\n## 排解疑難 - 常見的讀取錯誤1\n\n路徑錯誤\n\n```{r echo=TRUE, eval=FALSE}\npath <- \"wrong_file_path\"\ndat <- read.csv(file = path)\n```\n\n<pre>\nError in file(file, \"rt\") : 無法開啟連結\n此外: Warning message:\n  In file(file, \"rt\") : 無法開啟檔案 'wrong_file_path' ：No such file or directory\n</pre>\n\n- 絕對路徑 -> 確認檔案是否存在\n- 相對路徑 -> 利用`getwd`了解 R 當下的路徑位置\n\n\n## 排解疑難 - 常見的讀取錯誤2\n\n格式錯誤\n\n```{r echo=TRUE, eval=FALSE}\npath <- \"data/transaction.csv\"\ndat <- read.csv(file = path, header = TRUE, sep = \"1\")\n```\n\n<pre>\nError in read.table(file = file, header = header, sep = sep, quote = quote,  : \n  more columns than column names\n</pre>\n\n- 利用**其他編輯器**確認分隔符號\n- 確認每列的資料的欄位是正確的\n- 必要時，請用其他文件編輯器校正欲讀取的檔案\n\n## 排解疑難 - 常見的讀取錯誤3 \n\n編碼錯誤\n\n```{r echo=TRUE}\nurl <- \"http://johnsonhsieh.github.io/dsp-introR/data/dsp-gift-2013-big5/%E8%B2%B7%E8%B3%A3st_A_10109_10109.csv\"\n```\n\n```{r echo=TRUE, eval=FALSE}\ndat <- read.csv(url)\n```\n\n<pre class=\"code\">\nError in make.names(col.names, unique = TRUE) : \n  無效的多位元組字串於 <b6>m<c2><ed><a5><ab><b0><cf>\n</pre>\n\n- 查詢檔案的編碼\n- 常見的中文編碼有**UTF-8**和**BIG-5**\n\n```{r echo=TRUE, eval=FALSE}\n# 利用`fileEncoding`參數選擇檔案編碼 - big5 / utf8\ndat2 <- read.csv(url, fileEncoding = \"big5\")\n```\n\n## 讀取其他軟體資料集\n\n- For SPSS and Stata datasets, use the `foreign` package\n  - Cars: [Cars.sav](http://calcnet.mth.cmich.edu/org/spss/V16_materials/DataSets_v16/Cars.sav)\n- Milk Production: [p004.dat](http://www.ats.ucla.edu/stat/stata/examples/chp/p004.dta)\n\n```{r, eval = F}\n# install.packages(\"foreign\") # 安裝R套件 foreign\nlibrary(foreign) # 載入套件 \ncars <- read.spss(\"data/Cars.sav\", to.data.frame = TRUE)\nmilk <- read.dta(\"data/p004.dta\")\n# head(cars)\n# head(milk)\n```\n\n## 讀取其他軟體資料集\n\n- For SAS datasets, use the `sas7bdat` package\n- airline: [airline.sas7bdat](http://www.principlesofeconometrics.com/sas/airline.sas7bdat)\n\n```{r}\n# install.packages(\"sas7bdat\")\nlibrary(sas7bdat)\nairline <- read.sas7bdat(\"data/airline.sas7bdat\")\nhead(airline)\n```\n\n# Data I/O：讀取網頁內容(Lite)\n\n## 逐行輸入與輸出\n\n- `readLines`, `writeLines`\n- 是讀取網頁原始碼的好工具\n\n```{r echo=TRUE}\noutput <- file(\"output.txt\")\nwriteLines(as.character(1:12), con = output)\ninput <- readLines(output)\ninput\n```\n\n\n## 練習\n\n找出[清心福全](http://www.319papago.idv.tw/lifeinfo/chingshin/chingshin-02.html)台北市南港店的地址\n\n```{r echo=TRUE}\nweb_page <- readLines(\"http://www.319papago.idv.tw/lifeinfo/chingshin/chingshin-02.html\")\n# 如果你是windows, 這邊會遇到編碼問題，請加:\n# web_page <- readLines(\"http://www.319papago.idv.tw/lifeinfo/chingshin/chingshin-02.html\",encoding = 'UTF-8')\nmatches <- gregexpr(\"台北市南港區[\\u4E00-\\u9FA5|0-9]+\", web_page)\ntmp <- regmatches(web_page, matches)\nunlist(tmp) # 把 list 轉成 vector\n```\n\n---\n\n其中：\n```\n[\\u4E00-\\u9FA5]  ：表示所有中文字符\n|                 :表示 或\n[0-9]\t           ：含數字之字串\n[a]+             ：一或多個 a\n```\n此寫法為 **正規表示法**，後續將會在 **字串處理** 的主題中跟各位介紹。\n\n\n## 小挑戰\n\n- 找出清心福全台北市門市的電話號碼\n- 提示：`\"02-[0-9]+\"`\n\n## 小挑戰\n\n- 找出清心福全台北市門市的電話號碼\n- 提示：`\"02-[0-9]+\"`\n\n### 參考解答：\n\n```{r echo=TRUE}\nweb_page <- readLines(\"http://www.319papago.idv.tw/lifeinfo/chingshin/chingshin-02.html\")\nmatches <- gregexpr(\"02-[0-9]+\", web_page)\ntmp <- regmatches(web_page, matches)\nhead(unlist(tmp))\n```\n\n# Data I/O : 檢視資料\n\n## Recap 一下 Data I/O 我們學了什麼？\n\n**Data ETL 的第一步：輸入資料**\n\n- 設定資料路徑：`getwd()` & `setwd()`\n- 輸入不同資料型態：\n    - 表格式： `read.csv()` & `read.table()`\n    - 網頁： `readLines()`\n    - 其他軟體：`read.sas7bdat()` & `read.spss()`\n    - 注意編碼、路徑設定、資料內容有沒有錯誤\n- 輸出資料：`write.csv()`\n\n## 輸入資料後下一步：檢視資料有無異常\n\n輸入資料後，我們才準備正要開始 ETL 呢！\n\n複習一下常用的資料檢視方式：\n\n- 總覽\n    - `head()`, `tail()`：抓前五筆、後五筆資料\n    - `str()`, `summary()`：檢視資料的結構、簡單敘述性統計\n    - `View()`：自由瀏覽\n- 單一欄位檢視\n    - `unique()`：檢視類別型欄位\n    - `table()`：檢視類別型欄位\n    \n## 資料總覽\n\n```{r}\nhead(transaction)\n```\n\n---\n\n```{r}\ntail(transaction)\n```\n\n---\n\n`str()` 會檢視資料中每個欄位的：型態(int, Factor, chr, ...)以及值\n\n```{r, eval=F}\nstr(transaction)\n```\n\n<center><img src = 'img/str_example.jpg' height = 400></center>\n\n----\n\n`summary` 會檢視資料中每個欄位敘述性統計(值的分佈)\n\n```{r, eval = F}\nsummary(transaction)\n```\n\n<center><img src = 'img/summary_example.jpg' height = 300></center>\n\n----\n\n`View()`\n\n```{r, eval = F}\nView(transaction)\n```\n\n<center><img src = 'img/view_data.jpg' height = 400></center>\n\n## 單一欄位檢視\n\n```{r}\ntable(transaction$city)\n```\n\n```{r}\nunique(transaction$district)\n```\n\n# Data Manipulation\n\n# Data Manipulation: Pipe Line Coding Style\n\n## 為什麼這邊要教 Pipeline Coding style ?\n\n根據~~不具名~~調查指出，寫程式花了將近 80% 時間在思考**如何命名物件名稱**。\n\n命名物件名稱是門藝術，當然我們也可以隨性命名：\n\n```{r}\n## 假設我們現在要做這件事情\npixnet_good <- iris$Species\npixnet_good_again <- as.character(pixnet_good)\npixnet_good_again_again <- table(pixnet_good_again)\npixnet_good_again_again\n```\n\n-----\n\n當然我們也可以這樣改寫，節省命名的時間：\n\n```{r}\ntable(as.character(iris$Species))\n```\n\n## 為什麼這邊要教 Pipeline Coding style ?\n\n當整份 `.r` 檔都是這樣的寫法時，你會發現幾個問題：\n\n- 解讀程式碼不直覺：我們習慣從外往內解讀 `table -> as.character -> iris$...`\n- 要改寫程式碼也較不容易\n\n所以我們需要一個更直覺的工具幫助我們解決這些問題 ...\n\n## 2014 年最有影響的套件之一：magrittr \n\n- 壓縮的程式碼不好讀\n- 展開的程式碼會產生很多暫存變數\n\\\n\\\n<h3> **magrittr 套件聽到大家的聲音了！** \n  <img src = 'img/magrittr_logo.png'>\n</h3>\n\n- 運用 `magrittr` 所開發的 `%>%` 進行 Pipeline coding style\n- 養成 Pipeline Style 的 coding 習慣，上述問題迎刃而解！\n    - Pipeline 快捷鍵(MAC)：`command + shift + M`\n    - Pipeline 快捷鍵(WIN)：`ctrl + shift + M`\n\n## 基本算子 (`%>%`)\n\n<iframe src=\"https://giphy.com/embed/aeSS6NKPqOKQ\" width=\"450\" height=\"330\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe>\n\n## 基本算子 (`%>%`)\n\n- 想像一下程式的寫作與閱讀邏輯\n- `%>%` 會將算子左邊的物件 (object) 傳到右邊的函數 (function) 中第一個 argument\n- . 點號適合用在欲傳入變數不是在傳入函數的第一個位置時使用\n- use `x %>% f`, rather than `f(x)`\n- or use `x %>% f(y, z)`, rather than `f(x, y, z)`\n- or `y %>% f(x, ., z)`, rather than `f(x, y, z)`\n- 更多 Pipeline 請參考 Johnson Hsieh 的[講義](https://rawgit.com/DataScienceHC/sandbox-for-datasci/master/%5B2015-08-12%5D%20R%20code%20with%20pipes/index.html)\n\n```{r}\n# install.packages(\"magrittr\")\nlibrary(magrittr)\nx <- 1:10\nx %>% mean # 由左而右順序操作\n```\n\n---\n\n```{r}\n# 指令壓縮\nplot(density(sample(mtcars$mpg, size=10000, replace=TRUE), \n             kernel=\"gaussian\"), col=\"red\", main=\"density of mpg\")\n```\n\n----\n\n```{r}\n# Pipe Line\nmtcars$mpg %>% \n    sample(size=10000, replace=TRUE) %>% \n    density(kernel=\"gaussian\") %>% \n    plot(col=\"red\", main=\"density of mpg\")\n```\n\n\n# Data Manipulation : 字串資料處理\n\n## tidyverse 套件\n\n`stringr` 是專門處理字串的一個知名套件，他與之後會介紹的強大套件 `dplyr`, `tidyr`, `ggplot2` 皆整合至 `tidyverse` 套件之中了。\n\n<center><img src = 'img/tidyverse.jpg'></center>\n\n## tidyverse 套件安裝\n\n我們先安裝 `tidyverse` 套件：\n\n```{r, eval = F}\ninstall.packages(\"tidyverse\")\n```\n\n```{r}\nlibrary(tidyverse)\nlibrary(stringr)\n```\n\n## stringr 基本介紹\n\n[所有的 stringr 的 function](http://stringr.tidyverse.org/reference/index.html) 皆用 `str_` 作為開頭（記得善用 Tab 鍵唷！）\n\n我們用先前的 `transaction` 資料來練習一下字串處理吧！\n\n以 `transaction` 的 `build_ymd` 建築年月日為例:\n\n```{r}\nbuild_ymd <- transaction$build_ymd\nbuild_ymd %>% head()\n```\n\n## stringr：str_length & str_sub 字串長度與字串擷取\n\n- **目標：取出 build_ymd 的年、月、日**\n- 注意：字串的長度不同(6與7)\n- 善用 `?str_sub` 查詢 function 使用方法\n\n```{r}\nyear <- ifelse(str_length(build_ymd) == 6, \n               str_sub(build_ymd, 1,2),\n               build_ymd %>% str_sub(1,3)) # 這兩種寫法都可以\nyear_unique <- year %>% unique()\nyear_unique\n```\n\n---\n\n若不寫 ifelse, 我們也可以：\n\n- start = 1 : 從第一個開始\n- end = -5 : 到倒數第五個\n\n```{r}\nyear_unique2 <- str_sub(build_ymd, 1,-5) %>% unique()\nany(year_unique != year_unique2) # check 有沒有任何一個不一樣\n```\n\n## stringr : str_detect 字串檢驗\n\n- **目標：從 build_type 中判斷是否有電梯**\n- 善用 `?str_detect` 查詢 function 使用方法\n\n```{r}\nbuild_type_vector <- transaction$build_type\nbuild_type_vector %>% str_detect('有電梯') %>% table\n```\n\n## stringr : str_split 字串分割\n\n- **目標：根據 fruit 中的 and 進行切割**\n- 善用 `?str_split` 查詢 function 使用方法\n\n```{r}\nfruits <- c(\n  \"apples and oranges and pears and bananas\",\n  \"pineapples and mangos and guavas\")\nstr_split(fruits, \" and \")\nstr_split(fruits, \" and \", simplify = TRUE) # simplify = T > 回傳矩陣\n```\n\n\n## stringr : str_replace 字串取代\n\n- **目標：將 trac_type 中的`房地`拿掉**\n- 善用 `?str_replace` 查詢 function 使用方法\n\n```{r}\ntrac_type <- transaction$trac_type\ntrac_type %>% str_replace('房地','') %>% head\n```\n\n## stringr : str_replace 字串取代 {.build}\n\n- 目標：將 trac_type 中的`(土地+建物)`拿掉\n- 善用 `?str_replace` 查詢 function 使用方法\n\n```{r}\ntrac_type <- transaction$trac_type\ntrac_type %>% str_replace('(土地+建物)','') %>% head\n```\n\n<center><img src='http://i.imgur.com/u4N3wpJ.jpg'></center>\n\n## 正規表示法 Regular Expression\n\n正規表示法是一種描述文字模式的語言，可以讓我們撰寫程式來自文字中比對、取代甚至是抽取各種資訊。\n\n[參考 Wush Wu 所撰寫的教材](http://datascienceandr.org/articles/RegularExpression.html)，開頭或結尾的簡單的例子：\n\n- `^AA`:表示以`AA`為開頭的規則\n- `AA$`:表示以`AA`為結尾的規則\n\n```{r}\nstr_detect(c('AA1','A2','V3','AAA4','ACA21'),'^AA')\nstr_detect(c('AA1','A2','V3','AAA4','ACA21'),'1$')\n```\n\n\n## `(土地+建物)`無法辨識的原因\n\nstringr 中的 `pattern`參數預設使用正規表示法，剛剛我們所要比對的規則`(土地+建物)`中的`(`,`+`,`)`皆是正規表示法中的特殊符號，如果這些剛好是要比對的文字，那就要加上跳脫字元\"\\\"。又剛好跳脫字元\"\\\"也是R 的字串的跳脫字元，所以我們在輸入時，一個\"\\\"就要輸入兩次。 \n\n```{r}\ntrac_type %>% str_replace('\\\\(土地\\\\+建物\\\\)','') %>% head\n```\n\n# Data Manipulation : 資料基本操作\n\n## 2014 年最有影響的套件之一：dplyr\n\n- 讓R 使用者可以用更有彈性的方式來處理資料\n- 針對`data.frame`做設計（名稱中的`d`）\n- 設計理念\n    - 導入資料整理最重要的動作（非常類似SQL）\n    - 快\n    - 支援異質資料源（`data.frame`或資料庫中的表格）\n\n## 學習dplyr的官方方式：`vignette`\n\n```{r dplyr-vignette, echo = TRUE, eval=FALSE}\nvignette(all = TRUE, package = \"dplyr\")\nvignette(\"introduction\", package = \"dplyr\")\n```\n\n- 更詳細的dplyr介紹可以閱讀dplyr的小論文\n- R 的開發者會針對一個主題撰寫小論文做介紹\n\n## dplyr簡介 {.columns-2}\n\n- `filter` 對列做篩選 (row)\n- `select` 對欄做篩選 (column)\n- `arrange` 排列\n- `mutate` 更改欄或新增欄\n- **`group_by` + `summarise` 分類\n\n<center>`r fig(\"R_ETL_Fn1.png\")`</center>\n\n出處：[資料科學愛好者年會資料分析上手課程：ETL1](https://www.youtube.com/watch?v=JD1eDxxrur0)\n\n## `filter` : 對列做篩選 \n\n<center>\n<img src='img/filter1.png' width=300 align='center'></img><img src='img/filter2.png' width=300 align='center'>\n</center>\n\n## `filter` : 對列做篩選\n\n- 目標：取出 city 為 '臺北市'\n\n```{r, eval = F}\nlibrary(dplyr) #載入套件\ntransaction %>% \n  filter(city == '臺北市') %>% head\n```\n\n<center><img src = 'img/filter_view.jpg' height = 300></center>\n\n## `select` : 對行做選取\n\n<center>\n<img src='img/select1.png' height=300 align='center'></img><img src='img/select2.png' height=300 align='center'>\n</center>\n\n## `select` : 對行做選取\n\n- 目標：取出 `city`, `district`, `price_total` 欄位\n\n```{r}\ntransaction %>% \n  select(city, district, price_total) %>% \n  head()\n```\n\n## `select` : 對行做選取\n\n也可以用負號`-`執行反向選取\n\n```{r, eval= F}\ntransaction %>% \n  select(-c(city, district, price_total))%>% \n  head()\n```\n\n<center><img src = 'img/select_view.jpg' height = 300></center>\n\n## `arrange` : 資料排序\n\n<center>\n<img src='img/arrange.png' height=300 align='center'></img><img src='img/arranged.png' height=300 align='center'></img>\n</center>\n\n## `arrange` : 資料排序\n\n- 目標：按照總價格 `price_total` 由小到大進行排序\n- 注意：可以發現到 price_total 似乎有一些值不合理？(0)如何檢驗？ -> ETL\n\n```{r}\ntransaction %>% arrange(price_total) %>% select(X,city, price_total) %>% head\n```\n\n## `arrange` : 資料排序\n\n- 排序預設是由小到大，加上`desc`可使用遞增排列\n\n```{r}\ntransaction %>% arrange(desc(price_total)) %>% \n  select(X,city, price_total) %>% head\n```\n\n## `mutate` : 新增欄位\n\n<center>\n<img src='img/origin.png' width=300 align='center'></img><img src='img/mutate.png' width=300 align='center'>\n</center>\n\n\n## `mutate` : 新增欄位\n\n- 目標：根據 `area_build` , `price_total` 自行計算單位坪價\n\n```{r}\ntransaction_new <- transaction %>% \n  mutate(price_per_unit = price_total/area_build)\ntransaction_new %>% select(price_total, area_build, price_per_unit) %>% head\n```\n\n## 其他 dplyr 基本常用 function\n\n- 移除重複資料: `distinct(transaction)`\n- 隨機抽取資料: `sample_n(transaction, 5)`\n- 抽取指定列: `slice(transaction, c(1,3,4,5))`\n- 更多請見[dplyr Cheatsheet](https://github.com/rstudio/cheatsheets/raw/master/source/pdfs/data-transformation-cheatsheet.pdf)\n\n## Data Manipulation 小挑戰\n\n- 目標：利用`build_type`欄位挑出 **有電梯** 的資料\n- 方法：`filter()` + `str_()`\n\n```{r, echo = F}\ntransaction %>% \n  filter(build_type %>% str_detect('有電梯')) %>% \n  head %>% \n  datatable(options = list(dom = 't',scrollX = TRUE, fixedColumns = TRUE,\n                           initComplete = JS(\"function(settings, json) {\",\n      \"$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});\",\n      \"}\")),extensions = 'FixedColumns')\n```\n\n## Data Manipulation 小挑戰參考解答\n\n```{r, echo = T, eval = F}\ntransaction %>% \n  filter(build_type %>% str_detect('有電梯')) %>% \n  head\n```\n\n## 小挑戰2\n\n- 目標：請挑出 在台北市中山區與北投區的交易資料，並且新增`is_elevator` 是否有電梯的欄位，若有電梯則填入'TRUE'，若無則填入'FALSE'，並且以屋齡做遞增排序，僅保留`city`, `district`, `age`, `price_unit` 等欄位。\n- Tips : 多個條件配對可用 `%in%`。 ex: `apple` %in% `c('apple', 'banana')`\n\n```{r, echo = F}\ntransaction %>% \n  filter(city == '臺北市', district %in% c('中山區','北投區')) %>% \n  mutate(is_eleavator = str_detect(build_type, '有電梯')) %>% \n  arrange(age) %>% \n  select(city, district, age, price_unit) %>% head\n```\n\n----\n\n```{r, eval=F}\ntransaction %>% \n  filter(city == '臺北市', district %in% c('中山區','北投區')) %>% \n  mutate(is_eleavator = str_detect(build_type, '有電梯')) %>% \n  arrange(age) %>% \n  select(city, district, age, price_unit) %>% head\n```\n\n\n# Data Manipulation : 資料型態轉換\n\n## 資料型態轉換 : Wide format <-> Long format {.build}\n\n<center><img src='img/wide-long.png' height=80%></img></center>\n\n事實上 **Long-format** 的資料的格式不容易讓人類做比較。反而比較易於電腦讀取，人類在吸收資訊的時候更適合看 **wide-format**。\n\n接著我們就來介紹如何做資料型態的轉換囉！long-format <-> wide-format\n\n## spread & gather : 長轉寬\n\n接著我們來介紹 tidyr 中的 `spread` & `gather` 這兩個 Function：\n\n- `?spread` : key 擺放要展開的欄位，value 展開欄位後對應填入的值\n\n```{r}\nlibrary(tidyr) # 載入套件\nlong <- data.frame(id = c(1,1,2,2,3,3),\n                   sex = c(rep('female',2),rep('male',4)),\n                   class = rep(c('math','science'), length.out = 6),\n                   score = c(41, 47, 53, 63, 54, 58))\nwide <- long %>% spread(class, score)\nwide\n```\n\n## spread & gather : 寬轉長\n\n- `?gather` : \n    - key、value : 皆放欄位名稱\n    - `-c(id, sex)` : 這兩個欄位不要轉換\n\n```{r}\nwide %>% \n  gather(key = 'class',value = 'score', -c(id,sex))\n```\n\n# Data Manipulation : 資料合併\n\n## `bind_` 資料表合併 {.columns-2}\n\n- dplyr::`bind_rows()`\n\n<img src='img/bind_rows.png' height=400 align='center'></img>\n\n- dplyr::`bond_cols`\n\n<img src='img/bind_col.png' height=300 align='center'></img>\n\n## `_join` 資料表合併\n\n**join family：left_join**\n\n```{r, eval = F}\nleft_join(a, b, by = \"x1\")\n```\n\n<center><img src='img/left_join.png' height=400></img></center>\n\n## `_join` 資料表合併\n\n**join family：right_join**\n\n```{r, eval = F}\nright_join(a, b, by = \"x1\")\n```\n\n<center><img src='img/right_join.png' height=400></img></center>\n\n## `_join` 資料表合併\n\n**join family：inner_join**\n\n```{r, eval = F}\ninner_join(a, b, by = \"x1\")\n```\n\n<center><img src='img/inner_join.png' height=400></img></center>\n\n## `union (聯集)` 資料表合併\n\n```{r, eval = F}\nunion(a, b)\n```\n\n<center><img src='img/union.png' height=400></img></center>\n\n## `intersect (交集)` 資料表合併\n\n```{r, eval = F}\nintersect(a, b)\n```\n\n<center><img src='img/intersect.png' height=400></img></center>\n\n## `setdiff (插集)` 資料表合併\n\n```{r, eval = F}\nsetdiff(a, b)\n```\n\n<center><img src='img/setdiff.png' height=400></img></center>\n\n# Data Aggregation : 樞紐分析\n\n## 樞紐分析 `group_by` + `summarise`\n\n<center>\n<img src='img/origin.png' width=300 align='center'></img><img src='img/group_by.png' width=300 align='center'></img><img src='img/summarise.png' width=300 align='center'>\n</center>\n\n## 樞紐分析 `group_by` + `summarise()`\n\n- 目標：計算 **各縣市** 的交易**筆數**與**平均坪價**，並以高排到低。\n- 利用`?dplyr::summarise` 查看可以擺什麼 `summary functions`\n    - `min()`, `max()`\n    - `n()`, `mean()`\n    - 更多請見 dplyr cheatsheet\n    \n## 樞紐分析 `group_by` + `summarise(n())`    \n\n- 利用`group_by` + `summarise` + `arrange(desc)`\n    - `summarise` 中的擺放的`fun`為 `n()` = `length()`，表示該 group 中有幾筆資料、`mean(price_unit)`表示該 group 中 price_unit 平均。\n\n```{r}\ntransaction %>% \n  group_by(city) %>% \n  summarise(n = n(), mean = mean(price_unit, na.rm=T))\n```\n\n## 樞紐分析 `group_by` + `summarise(max)`\n\n- 目標：計算 **各縣市** 的最高的**平均坪價**為多少？\n\n```{r}\ntransaction %>% \n  group_by(city) %>% \n  summarise(max_price = max(price_unit, na.rm=T))\n```\n\n\n## 樞紐分析小挑戰\n\n<center>請列出**臺北市的各行政區**於**各種住宅型態**的**平均單位坪價**，由平均高至低做排序。</center>\n\n- Tips : filter -> group_by(a,b) -> summrise() -> arrange\n\n```{r, echo = F}\ntransaction %>% \n  filter(city == '臺北市') %>% \n  group_by(district, build_type) %>% \n  summarise(mean = round(mean(price_unit, na.rm = T))) %>% \n  head %>% \n  datatable(options = list(dom = 't',scrollX = TRUE, fixedColumns = TRUE,initComplete = JS(\"function(settings, json) {\",\"$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});\",\"}\")),extensions = 'FixedColumns')\n```\n\n---\n\n```{r, eval = F}\ntransaction %>% \n  filter(city == '臺北市') %>% \n  group_by(district, build_type) %>% \n  summarise(mean = mean(price_unit, na.rm = T))\n```\n\n\n## 樞紐分析小挑戰之資料型態轉換\n\n`summarise` 所回傳的 long-format 其實較適合我們後續畫圖(ggplot2)的資料型態，這部份各位會在下一次 `EDA in R`的課程中感受到！\n\n我們利用先前學的資料型態轉換的技巧來將結果轉成方便讀比較的形式\n\n```{r, eval = F}\ntransaction %>% \n  filter(city == '臺北市') %>% \n  group_by(district, build_type) %>% \n  summarise(mean = mean(price_unit, na.rm = T)) %>% \n  spread(build_type, mean)\n```\n\n---\n\n```{r, echo = F}\ntransaction %>% \n  filter(city == '臺北市') %>% \n  group_by(district, build_type) %>% \n  summarise(mean = round(mean(price_unit, na.rm = T))) %>% \n  spread(build_type, mean) %>% \n    datatable(options = list(dom = 't',scrollX = TRUE, fixedColumns = TRUE,initComplete = JS(\"function(settings, json) {\",\"$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});\",\"}\")),extensions = 'FixedColumns')\n```\n\n# Recap Today\n\n## **Data ETL 的第一步：輸入資料** {.columns-2}\n\n- 設定資料路徑：`getwd()` & `setwd()`\n- 輸入不同資料型態：\n    - 表格式： \n    `read.csv()` & `read.table()`\n    - 網頁： `readLines()`\n    - 其他軟體：\n    `read.sas7bdat()` & `read.spss()`\n    - 注意編碼、路徑設定、資料內容有沒有錯誤\n- 輸出資料：`write.csv()`\n\n<center><img src = 'img/recap-io.jpg' height = 450></center>\n\n## **Data Manipulation：將資料操之在手。** {.columns-2}\n\n- 字串取代/配對/長度/位置/切割：\n    - `str_`\n- 資料表基本操作方式:\n    - `filter` 挑選列 `select` 挑選欄\n    - `arrange` 排序, `mutate` 新增修改\n- 資料表型態轉換：\n    - `gather` 寬轉長\n    - `spread` 長轉寬\n- 資料合併：\n    - `_join`：合併資料表\n    - `bind_` : 合併列或欄\n    \n<center><img src = 'img/recap-man.jpg' height = 450></center>\n\n## **Data Aggregation : 樞紐分析** \n\n- 資料彙總:\n    - `group_by` 依照\n    - `summarise` 彙總 \n    `meam`, `medium`, `sum`, `max`, `min`, `n`\n\n<center><img src = 'img/recap-agg.jpg' width = 800></center>\n\n# Finally, ....\n\n## 恭喜大家踏入清資料的坑！\n\n<center><img src = 'img/datascientist_flow.png' height = 500></center>\n\n## 非誠勿擾，切勿 GIGO\n\n<center><img src = 'img/garbage-in-garbage-out.jpg' height = 400></center>\n\n## 補充資料\n\n- [必收的 Rstudio 發表的大量 Cheatsheet](https://www.rstudio.com/resources/cheatsheets/)\n- [R語言翻轉教室 -- 全中文R語言互動式教材](http://datascienceandr.org/)\n- [tidyverse 介紹](http://tidyverse.org/)\n- [Introduction to dplyr](https://cran.rstudio.com/web/packages/dplyr/vignettes/introduction.html)\n- [Cookbook for R](http://www.cookbook-r.com/)\n\n## 繼續學習之路\n\n- 了解自己的需求，詢問關鍵字與函數\n- [Taiwan R User Group](http://www.meetup.com/Taiwan-R)，mailing list: Taiwan-useR-Group-list@meetup.com\n- [ptt R_Language版](https://www.ptt.cc/bbs/R_Language/index.html)\n- [R軟體使用者論壇](https://groups.google.com/forum/#!forum/taiwanruser)\n- [StackOverflow](http://stackoverflow.com/) \n- 歡迎來信 unityculturesheng@gmail.com 或其他DSP優秀教師多多交流\n\n## 感謝大家！\n\n<center><br><br><img src = 'img/thank-you1.jpg' height = 400></center>",
    "created" : 1496143825687.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "762971582",
    "id" : "D333D53F",
    "lastKnownWriteTime" : 1496300037,
    "last_content_update" : 1496300037929,
    "path" : "~/Documents/DSP/PIXNET_workshop/DataETL.Rmd",
    "project_path" : "DataETL.Rmd",
    "properties" : {
        "docOutlineSize" : "151.94599992068478",
        "docOutlineVisible" : "1",
        "last_setup_crc32" : "38EBEF528a8383e0",
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}